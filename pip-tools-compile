#!/usr/bin/env python
"""
    pip-tools-compile
    ~~~~~~~~~~~~~~~~~

    Wrapper around pip-tools to "impersonate" different distributions when compiling requirements
"""
import argparse
import atexit
import functools
import io
import logging
import os
import platform
import re
import shutil
import sys
import textwrap
import traceback
from collections import namedtuple
from unittest import mock


SYSTEM = platform.system().lower()
CAPTURE_OUTPUT = os.environ.get("CAPTURE_OUTPUT", "1") == "1"
VERBOSE_COMPILE = os.environ.get("VERBOSE_COMPILE", "0") == "1"

LOG_STREAM = io.StringIO()
logging.basicConfig(
    level=logging.DEBUG,
    stream=LOG_STREAM,
    datefmt="%H:%M:%S",
    format="%(asctime)s,%(msecs)03.0f [%(name)-5s:%(lineno)-4d][%(levelname)-8s] %(message)s",
)

# Import pip-tools Libs
# Keep a reference to the original DependencyCache class
from piptools.cache import DependencyCache

real_version_info = sys.version_info


log = logging.getLogger(os.path.basename(__file__))

version_info = namedtuple("version_info", ["major", "minor", "micro", "releaselevel", "serial"])


class ImpersonateSystem:

    __slots__ = ("_python_version_info", "_platform")

    def __init__(self, python_version_info, platform):
        parts = [int(part) for part in python_version_info.split(".") if part.isdigit()]
        python_version_info = list(sys.version_info)
        for idx, part in enumerate(parts):
            python_version_info[idx] = part
        python_version_info = version_info(*python_version_info)
        self._python_version_info = python_version_info
        self._platform = platform

    def get_mocks(self):
        yield mock.patch(
            "pip._internal.utils.misc.sys.version_info",
            new_callable=mock.PropertyMock(return_value=real_version_info),
        )
        yield mock.patch(
            "piptools.scripts.compile.DependencyCache",
            wraps=functools.partial(
                tweak_piptools_depcache_filename, self._python_version_info, self._platform
            ),
        )
        yield mock.patch(
            "pip._vendor.packaging.tags.sys.version_info",
            return_value=self._python_version_info,
        )
        for toplevel in ("pip._vendor.distlib", "pip._vendor.packaging"):
            yield mock.patch(
                "{}.markers.platform.python_version".format(toplevel),
                return_value="{}.{}.{}".format(*self._python_version_info),
            )
            yield mock.patch(
                "{}.markers.platform.python_version_tuple".format(toplevel),
                return_value=tuple(str(part) for part in self._python_version_info),
            )

    def __enter__(self):
        for mock_obj in self.get_mocks():
            mock_obj.start()
        return self

    def __exit__(self, *args):
        mock.patch.stopall()


def tweak_piptools_depcache_filename(version_info, platform, *args, **kwargs):
    depcache = DependencyCache(*args, **kwargs)
    cache_file = os.path.join(
        os.path.dirname(depcache._cache_file),
        "depcache-{}-py{}.{}.json".format(platform, *version_info),
    )
    log.info("Tweaking the pip-tools depcache file to: %s", cache_file)
    depcache._cache_file = cache_file
    if os.environ["PIP_TOOLS_COMPILE_CLEAN_CACHE"] == "1":
        if os.path.exists(cache_file):
            os.unlink(cache_file)
    return depcache


class ImpersonateWindows(ImpersonateSystem):
    def get_mocks(self):
        yield from super().get_mocks()
        if SYSTEM != "windows":
            # We don't want pip trying query python's internals, it knows how to mock that internal information
            yield mock.patch("pip._vendor.packaging.tags._get_config_var", return_value=None)
            ## Patch pip's vendored packaging markers
            yield mock.patch(
                "pip._vendor.packaging.markers.os.name",
                new_callable=mock.PropertyMock(return_value="nt"),
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.sys.platform",
                new_callable=mock.PropertyMock(return_value="win32"),
            )
            yield mock.patch("pip._vendor.packaging.markers.platform.machine", return_value="AMD64")
            yield mock.patch("pip._vendor.packaging.markers.platform.release", return_value="8.1")
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.system", return_value="Windows"
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.version", return_value="6.3.9600"
            )


class ImpersonateDarwin(ImpersonateSystem):
    def get_mocks(self):
        yield from super().get_mocks()
        if SYSTEM != "darwin":
            # We don't want pip trying query python's internals, it knows how to mock that internal information
            yield mock.patch("pip._vendor.packaging.tags._get_config_var", return_value=None)
            yield mock.patch("pip._vendor.packaging.tags.platform.system", return_value="Darwin")
            yield mock.patch(
                "pip._vendor.packaging.tags.distutils.util.get_platform",
                return_value="macosx_10_15_x86_64",
            )
            yield mock.patch(
                "pip._vendor.packaging.tags.platform.mac_ver",
                return_value=("10.15", None, "x86_64"),
            )
            # Patch pip's vendored packaging markers
            yield mock.patch(
                "pip._vendor.packaging.markers.os.name",
                new_callable=mock.PropertyMock(return_value="posix"),
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.sys.platform",
                new_callable=mock.PropertyMock(return_value="darwin"),
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.machine", return_value="x86_64"
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.release", return_value="19.2.0"
            )
            yield mock.patch("pip._vendor.packaging.markers.platform.system", return_value="Darwin")
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.version",
                return_value="Darwin Kernel Version 19.2.0: Sat Nov  9 03:47:04 PST 2019; root:xnu-6153.61.1~20/RELEASE_X86_64",
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.python_version",
                return_value="{}.{}.{}".format(*self._python_version_info),
            )


class ImpersonateLinux(ImpersonateSystem):
    def get_mocks(self):
        yield from super().get_mocks()
        if SYSTEM != "linux":
            # We don't want pip trying query python's internals, it knows how to mock that internal information
            yield mock.patch("pip._vendor.packaging.tags._get_config_var", return_value=None)
            # Patch pip's vendored packaging markers
            yield mock.patch(
                "pip._vendor.packaging.markers.sys.platform",
                new_callable=mock.PropertyMock(
                    return_value="linux{}".format("2" if self._python_version_info[0] == 2 else "")
                ),
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.os.name",
                new_callable=mock.PropertyMock(return_value="posix"),
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.machine", return_value="x86_64"
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.release", return_value="4.19.29-1-lts"
            )
            yield mock.patch("pip._vendor.packaging.markers.platform.system", return_value="Linux")
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.version",
                return_value="#1 SMP Thu Mar 14 15:39:08 CET 2019",
            )
            yield mock.patch(
                "pip._vendor.packaging.markers.platform.python_version",
                return_value="{}.{}.{}".format(*self._python_version_info),
            )


class CatureSTDs:
    def __init__(self):
        self._stdout = io.StringIO()
        self._stderr = io.StringIO()
        self._sys_stdout = sys.stdout
        self._sys_stderr = sys.stderr

    def __enter__(self):
        sys.stdout = self._stdout
        sys.stderr = self._stderr
        return self

    def __exit__(self, *args):
        sys.stdout = self._sys_stdout
        sys.stderr = self._sys_stderr
        if not CAPTURE_OUTPUT:
            self._stdout.seek(0)
            sys.stdout.write(self._stdout.read())
            self._stderr.seek(0)
            sys.stderr.write(self._stderr.read())

    @property
    def stdout(self):
        pos = self._stdout.tell()
        self._stdout.seek(0)
        try:
            return self._stdout.read()
        finally:
            self._stdout.seek(pos)

    @property
    def stderr(self):
        pos = self._stderr.tell()
        self._stderr.seek(0)
        try:
            return self._stderr.read()
        finally:
            self._stderr.seek(pos)


def compile_requirement_file(source, dest, options, unknown_args):
    log.info("Compiling requirements to %s", dest)

    input_rewrites = {}
    passthrough_lines = {}

    regexes = []
    for regex in options.passthrough_line_from_input:
        regexes.append(re.compile(regex))

    call_args = ["pip-compile", "-o", dest]
    if unknown_args:
        call_args += unknown_args
    if options.include:
        includes = []
        for input_file in options.include:
            out_contents = []
            input_file = input_file.format(py_version=options.py_version)
            with open(input_file) as rfh:
                in_contents = rfh.read()
            for line in in_contents.splitlines():
                match_found = False
                for regex in regexes:
                    if match_found:
                        break
                    if regex.match(line):
                        match_found = True
                        if input_file not in input_rewrites:
                            input_rewrites[input_file] = input_file
                            shutil.move(input_file, input_file + ".bak")
                            atexit.register(shutil.move, input_file + ".bak", input_file)
                        if input_file not in passthrough_lines:
                            passthrough_lines[input_file] = []
                if match_found:
                    passthrough_lines[input_file].append(line)
                    # Skip this line
                    continue
                out_contents.append(line)
            if input_file in input_rewrites:
                with open(input_rewrites[input_file], "w") as wfh:
                    for line in out_contents:
                        wfh.write("{}\n".format(line))
                includes.append(input_rewrites[input_file])
            else:
                includes.append(input_file)
        call_args += includes
    call_args.append(source)

    original_sys_arg = sys.argv[:]
    success = False
    with mock.patch(
        "pip._internal.utils.misc.sys.version_info",
        new_callable=mock.PropertyMock(return_value=real_version_info),
    ):
        try:
            print("Running: {}".format(" ".join(call_args)))
            print("  Impersonating: {}".format(options.platform))
            print("  Mocked Python Version: {}".format(options.py_version))
            sys.argv = call_args[:]
            log.debug("Switching sys.argv to: %s", sys.argv)
            try:
                import piptools.scripts.compile

                piptools.scripts.compile.cli()
            except SystemExit as exc:
                if exc.code == 0:
                    success = True
                print("Failed to compile requirements. Exit code: {}".format(exc.code))
            except Exception:
                print("Exception raised when processing {}".format(source))
                print(traceback.format_exc())
        finally:
            if success is True:
                log.info("Finished compiling %s", dest)

                if input_rewrites:
                    with open(dest) as rfh:
                        dest_contents = rfh.read()

                    for input_file, rewriten_file in input_rewrites.items():
                        if rewriten_file in dest_contents:
                            dest_contents = dest_contents.replace(rewriten_file, input_file)

                        try:
                            os.unlink(rewriten_file)
                        except OSError:
                            pass

                    with open(dest, "w") as wfh:
                        wfh.write(dest_contents)
                        for input_file, lines in passthrough_lines.items():
                            wfh.write("# Passthrough dependencies from {}\n".format(input_file))
                            for line in lines:
                                wfh.write("{}\n".format(line))

            sys.argv = original_sys_arg

    # Flag success
    return success


def show_info_to_patch():
    import pprint
    import platform

    print("Generating information under {}\n".format(platform.system()))
    patch_data = (
        ("pip._vendor.packaging.markers", "platform.python_version"),
        ("pip._vendor.packaging.markers", "os.name"),
        ("pip._vendor.packaging.markers", "sys.platform"),
        ("pip._vendor.packaging.markers", "platform.machine"),
        ("pip._vendor.packaging.markers", "platform.release"),
        ("pip._vendor.packaging.markers", "platform.system"),
        ("pip._vendor.packaging.markers", "platform.version"),
    )
    real_data = {}
    for module, function in patch_data:
        if module not in real_data:
            real_data[module] = {}
        mod = __import__(module)
        mod_parts = module.split(".")
        mod_parts.pop(0)
        while mod_parts:
            part = mod_parts.pop(0)
            mod = getattr(mod, part)
        func_parts = function.split(".")
        func = mod
        while func_parts:
            part = func_parts.pop(0)
            func = getattr(func, part)
        data = func
        if callable(data):
            data = data()
        real_data[module][function] = data

    pprint.pprint(real_data)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--show-info-to-patch",
        action="store_true",
        help="Print out the information we require to patch the multiple platforms",
    )
    parser.add_argument(
        "--platform", choices=("windows", "darwin", "linux"), default=platform.system().lower()
    )
    parser.add_argument("--py-version", default="{}.{}".format(*sys.version_info))
    parser.add_argument("--include", action="append", default=[])
    parser.add_argument("--output-dir", default=None)
    parser.add_argument("--out-prefix", default=None)
    parser.add_argument(
        "--remove-line",
        default=[],
        action="append",
        help="Python regular experession to search and remove from the compiled requirements and remove it",
    )
    parser.add_argument(
        "--passthrough-line-from-input",
        default=[],
        action="append",
        help="Python regular experession to search and remove from the input requirements and append in the destination requirements file",
    )
    parser.add_argument(
        "--clean-cache",
        action="store_true",
        default=False,
        help="Clean pip-tools dependency cache files",
    )
    parser.add_argument("files", nargs="*")

    options, unknown_args = parser.parse_known_args()

    if options.show_info_to_patch:
        show_info_to_patch()
        parser.exit(0)

    if not options.files:
        parser.exit(2, "Please pass at least one requirement file")

    os.environ["PIP_TOOLS_COMPILE_CLEAN_CACHE"] = "1" if options.clean_cache else "0"

    if SYSTEM == "windows":
        print(
            "\n"
            "============================================================================\n"
            "  Windows Is Not Supported. Please Run In A Linux Docker Container Instead  \n"
            "============================================================================\n",
            "\n",
            file=sys.stderr,
        )

    if SYSTEM == "darwin":
        print(
            "\n"
            "==========================================================================\n"
            "  macOS Is Not Supported. Please Run In A Linux Docker Container Instead  \n"
            "==========================================================================\n",
            "\n",
            file=sys.stderr,
        )

    if sys.version_info >= (3, 10):
        print(
            "\n"
            "======================================\n"
            "  Py3.10+ Is Not Currently Supported  \n"
            "======================================\n",
            "\n",
            file=sys.stderr,
        )

    impersonations = {
        "darwin": ImpersonateDarwin,
        "windows": ImpersonateWindows,
        "linux": ImpersonateLinux,
    }

    regexes = []
    for regex in options.remove_line:
        regexes.append(re.compile(regex))

    stdout = stderr = None
    exitcode = 0

    with CatureSTDs() as capstds:
        with impersonations[options.platform](options.py_version, options.platform):
            import piptools.scripts.compile

            for fpath in options.files:
                if not fpath.endswith(".in"):
                    continue

                # Return the log strem to 0, either to write a log file in case of an error,
                # or to overwrite the contents for this next fpath
                LOG_STREAM.seek(0)

                source_dir = os.path.dirname(fpath)
                if options.output_dir:
                    dest_dir = options.output_dir
                else:
                    dest_dir = os.path.join(source_dir, "py{}".format(options.py_version))
                if not os.path.isdir(dest_dir):
                    os.makedirs(dest_dir)
                outfile = os.path.basename(fpath).replace(".in", ".txt")
                if options.out_prefix:
                    outfile = "{}-{}".format(options.out_prefix, outfile)
                outfile_path = os.path.join(dest_dir, outfile)
                if not compile_requirement_file(fpath, outfile_path, options, unknown_args):
                    exitcode = 1
                    error_logfile = outfile_path.replace(".txt", ".log")
                    with open(error_logfile, "w") as wfh:
                        LOG_STREAM.seek(0)
                        wfh.write(
                            ">>>>>>> LOGS >>>>>>>>>\n{}\n<<<<<<< LOGS <<<<<<<<<\n".format(
                                LOG_STREAM.read().strip()
                            )
                        )
                        wfh.write(
                            "\n>>>>>>> STDOUT >>>>>>>\n{}\n<<<<<<< STDOUT <<<<<<<\n".format(
                                capstds.stdout.strip()
                            )
                        )
                        wfh.write(
                            "\n>>>>>>> STDERR >>>>>>>\n{}\n<<<<<<< STDERR <<<<<<<\n".format(
                                capstds.stderr.strip()
                            )
                        )
                        print("Error log file at {}".format(error_logfile))
                    continue

                if not regexes:
                    continue

                with open(outfile_path) as rfh:
                    in_contents = rfh.read()

                out_contents = []
                for line in in_contents.splitlines():
                    print("Processing line: {!r} // {}".format(line, [r.pattern for r in regexes]))
                    for regex in regexes:
                        if regex.match(line):
                            print(
                                "Line commented out by regex '{}': '{}'".format(regex.pattern, line)
                            )
                            line = textwrap.dedent(
                                """\
                                # Next line explicitly commented out by {} because of the following regex: '{}'
                                # {}""".format(
                                    os.path.basename(__file__), regex.pattern, line
                                )
                            )
                            break
                    out_contents.append(line)

                with open(outfile_path, "w") as wfh:
                    wfh.write(os.linesep.join(out_contents) + os.linesep)

            if exitcode:
                stdout = capstds.stdout
                stderr = capstds.stderr

    if stdout:
        sys.__stdout__.write(capstds.stdout)
    if stderr:
        sys.__stderr__.write(capstds.stderr)
    sys.exit(exitcode)


if __name__ == "__main__":
    main()
